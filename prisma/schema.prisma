// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users{
  id String @default(uuid()) @id
  name String
  lastname String?
  email String
  password String
  balance Float? @default(0.00)
  role String @default("user")
  token String?
  emailToken String?
  passToken String?
  updatableEmail String?

  userRecharges Recharges[] @relation("user")
  ModRecharges Recharges[] @relation("mod")

  createdProducts Products[]
  createdCombo Combo[]

  cart CartUserProducts[]
}

model Categories{
  id String @default(uuid()) @id
  name String

  productos Products[]
}

model Products{
  id String @default(uuid()) @id
  name String
  price Float
  description String
  
  seller_id String
  categorieID String

  seller Users @relation(fields: [seller_id], references: [id])
  categorie Categories @relation(fields: [categorieID] ,references: [id], onDelete: Cascade, onUpdate: Cascade)

  images ProductImages[]
  combo ComboProducts[]
  usersCarts CartUserProducts[]

}
model ProductImages{
  id String @default(uuid()) @id
  id_product String
  url String
  public_id String @default("")

  product Products @relation(fields: [id_product], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Combo{
  id String @default(uuid()) @id
  name String
  description String
  price Float
  id_seller String

  seller Users @relation(fields: [id_seller], references: [id], onDelete: Cascade, onUpdate: Cascade)

  products ComboProducts[]
}

model ComboProducts{
  id String @default(uuid()) @id
  id_product String
  id_combo String
  quantity Int

  combo Combo @relation(fields: [id_combo], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Products @relation(fields: [id_product], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Recharges{
  id String @default(uuid()) @id
  balance Float
  
  userID String
  modID String

  createdAt DateTime @default(now())

  user Users @relation("user",fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mod Users @relation("mod", fields: [modID], references: [id], onDelete: Cascade, onUpdate: Cascade)

}

model CartUserProducts{
  id String @default(uuid()) @id
  id_user String
  id_product String
  quantity Int
  
  user Users @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Products @relation(fields: [id_product], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
